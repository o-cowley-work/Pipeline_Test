@Library('test_library') _ 
import main.test_class.Status 

import groovy.transform.Field

@Field def supportedProjects = []
@Field def supportedPlatforms = []
@Field def supportedRings = []

@Field Status statusblock = new Status() 

node {
    

    fillVariables()
    runPipeline() 
}


def runPipeline() {
    
    stage('Test library function') {
        echo "test 1"
        script {
            test_var.print_text()
        }
    }
    
    stage('Run test return library function') {
        echo "test 2"
        script {
            def a = test_var.return_string()
            echo a
        }
    }

    stage("testing the imports") {
        script {
            for(proj in supportedProjects) {
                echo proj
            }
            for(plat in supportedPlatforms) {
                echo plat
            }
            for(ring in supportedRings) {
                echo ring
            }
        }
        
    }

    stage("testing statuses from library") {
        echo statusblock.BUILD_RESULT_SKIPPED
        echo "Testing the vars method of getting status"
        script {
            echo status.GITHUB_COMMIT_STATUS_SUCCESS
        }
        
    }

    stage("Testing the evaluation of null and \"\"") {
        script {
            echo "" == false 
            echo null == false
            def test_string = ""
            def test_null = null
            if (test_string) {
                echo "empty string evaluated to false"
            }

            if (test_null) {
                echo "null evaluated to false"
            }
        }
    }
	
}

def fillVariables() {
    stage("test filling variables") {
        supportedProjects = test_var.get_supported_projects()
        supportedPlatforms = test_var.get_supported_platforms()
        supportedRings = test_var.get_supported_rings()
    }
    
}