


import groovy.transform.Field




// @Field def supportedProjects = []
// @Field def supportedPlatforms = []
// @Field def supportedRings = []


@Field private Script loaded_static = null



node("Windows_Node"){
    

    checkoutFromGit()

    getScript()

    runPipeline()

    cleanUpWorkspace()

}

def Script getScript() {
    if (loaded_static == null) {
        loaded_static = load "${pwd()}\\Additional\\StaticInfo.groovy"
    }
    echo "Static Info class loaded"
    return loaded_static
}





def checkoutFromGit() {
    stage("Clone the build to use") {
        checkout (poll: false, 
            scm: [$class: 'GitSCM', 
            branches: [[name: '*/main']], 
            extensions: [[$class: 'CleanBeforeCheckout']], 
            userRemoteConfigs: [[credentialsId: '6859c06b-0809-4875-b655-28d3d5d4b152', 
                                url: 'https://github.com/oliverIwork/Pipeline_Test.git']]]
        )
    }
    
}


def runPipeline() {
    stage("Check if things are there") {
        echo "The current directory from env variable is: $env.WORKSPACE"
        
        def work = pwd()
        echo "This is the current director from pwd(): $work"

        echo "Testing a load of the script lib"
        def script_loaded = load ("$work/Additional/additional_scripts.groovy")

        script_loaded.doStuff("OOOOOOLIVER")

    }

    stage("Testing a class import") {
        echo getScript().TEST_ME
        echo getScript().TEST_ME2   
    }


    stage("Agent access to controller variables") {
        
        script_loaded.doStuff("IM ON AN AGENT")
        
    }
}

def cleanUpWorkspace() {
    stage("Cleaning up workspace") {
        cleanWs()
    }
}

// def runParallelTest() {
//     Map toRun = [:]

//     toRun["Outer A"] = {
//         echo "I'm about to start a parallel block"
//         runParallel()
//         }
//     toRun["Outer B"] = {
//         echo "I'm not a parallel block"

//         }

//     parallel(toRun)
// }

// def fillVariables() {
//     stage("test filling variables") {
//         supportedProjects = test_var.get_supported_projects()
//         supportedPlatforms = test_var.get_supported_platforms()
//         supportedRings = test_var.get_supported_rings()
//     }
    
// }

// def libResourceGrab() {
//     stage ("test resource grab") {
//         script {
//             test_var.return_library_resource()
//         }
        
//     }
    
// }


// def runParallel() {
//     Map toRun = [:]

//     toRun["StepA"] = {node ("Windows_Node") {echo "Doing A"}}
//     toRun["StebB"] = {node ("built-in") {echo "Doing B"}}

//     return parallel(toRun)
// }